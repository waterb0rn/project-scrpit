PlayerScript.cs

using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UIElements;
using static UnityEditor.Experimental.GraphView.GraphView;

public class movement : MonoBehaviour
{
    private float Move;
    [SerializeField] private float Jump;
    [SerializeField] private float Speed;
    [SerializeField] private float DashSpeed;
    private bool isGrounded;
    private bool isDashing;
    private float dashDuration = 0.265f;
    private bool canDash;
    private bool inDashCD;
    private float dashCD = 1.5f;
    private bool invinc;

    private bool inEscape = false;
    private float currentTimeScale;
    private bool facingLeft;
    public GameObject EscapeMenuUI;

    [SerializeField] public Sprite spriteColor;
    [SerializeField] private Sprite spriteColor1;
    [SerializeField] private Sprite spriteColor2;
    [SerializeField] private Sprite spriteColor3;

    public Transform player;
    public Transform respawnPoint;
    public Transform deadPoint;
    


    private Rigidbody2D rb;
    private SpriteRenderer sr;
    private TrailRenderer tr;

    // Start is called before the first frame update
    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        isGrounded = false;
        sr = GetComponent<SpriteRenderer>();
        tr = GetComponent<TrailRenderer>();

        canDash = true;
    }

    // Update is called once per frame
    void Update()
    {
        if (Input.GetKeyDown(KeyCode.Escape) && inEscape == false)
        {
            PressEscape();
        }
        else if(Input.GetKeyDown(KeyCode.Escape) && inEscape == true)
        {
            UnEscape();
        }

        if (isDashing == true || inEscape == true)
        {
            return;
        }

        Move = Input.GetAxis("Horizontal");

        if (Input.GetKeyDown(KeyCode.Q) && canDash == true)
        {
            StartCoroutine(Dash());
        }
        
        if (Input.GetKeyDown(KeyCode.Space) && isGrounded == true)
        {
            rb.velocity = new Vector2(rb.velocity.x, Jump);
            isGrounded = false;
        }

        if (isDashing == true || invinc == true)
        {
            spriteColor = spriteColor2;
        }
        else if(inDashCD == true)
        { 
            spriteColor = spriteColor3;
        }
        else
        {
            spriteColor = spriteColor1;
        }

        sr.sprite = spriteColor;

        Invert();
    }
    private void FixedUpdate()
    {
        if(isDashing == true || inEscape == true)
        {
            return;
        }
        rb.velocity = new Vector2(Move * Speed, rb.velocity.y);
    }

    void OnCollisionStay2D()
    {
        isGrounded = true;
    }
    private void OnCollisionExit2D()
    {
        isGrounded = false;
    }

    

    private void OnTriggerEnter2D(Collider2D other)
    {
        if(other.gameObject.CompareTag("Respawn") && invinc == false)
        {
            player.position = deadPoint.position;
            Invoke("RespawnPlayer", 1.5f);
        }
    }

    public void RespawnPlayer()
    {

        player.position = respawnPoint.position;
        invinc = true;
        Invoke("noInvinc", 0.15f);
    }
    private IEnumerator Dash()
    {
        isDashing = true;
        invinc = true;
        inDashCD = true;
        canDash = false;

        float originalGravity = rb.gravityScale;
        rb.gravityScale = 0f;
        rb.velocity = new Vector2(transform.localScale.x * DashSpeed, 0f);
        yield return new WaitForSeconds(0.05f);
        tr.emitting = true;
        yield return new WaitForSeconds(dashDuration);
        tr.emitting = false;
        rb.gravityScale = originalGravity;
        isDashing = false;
        Invoke("noInvinc", 0.1f);
        yield return new WaitForSeconds(dashCD);
        canDash = true;
        inDashCD = false;
    }
    void noInvinc()
    {
        invinc = false;
    }

    private void Invert()
    {
        if (facingLeft && Move > 0f || !facingLeft && Move < 0f)
        {
            Vector3 localScale = transform.localScale;
            facingLeft = !facingLeft;
            localScale.x *= -1f;
            transform.localScale = localScale;
        }
    }

    public void PressEscape()
    {
        currentTimeScale = Time.timeScale;
        Time.timeScale = 0;
        inEscape = true;
        EscapeMenuUI.SetActive(true);
    }
    public void UnEscape()
    {
        Time.timeScale = currentTimeScale;
        inEscape = false;
        EscapeMenuUI.SetActive(false);
    }

    public void QuitToMenu()
    {
        Time.timeScale = currentTimeScale;
        SceneManager.LoadScene(0);
    }
}

LaserSpawner.cs

using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Unity.Mathematics;
using UnityEngine;

public class LaserSpawner : MonoBehaviour
{
    public GameObject laser;
    public GameObject preLaser;

    [SerializeField] private float spawnRate;
    private float timer = 0;

    public Transform[] laserPos;

    private int laserPosIndex = 0;

    // Update is called once per frame
    void Update()
    {
        if (timer <= spawnRate)
        {
            timer += Time.deltaTime;
        }
        else
        {
            timer = 0;
            SpawnLaser();
        }

    }

    void SpawnLaser()
    {
        if(laserPosIndex >= 9)
        {
            laserPosIndex = 0;
        }
        else
        {
            Instantiate(laser, new Vector3(laserPos[laserPosIndex].position.x, transform.position.y, 0f), Quaternion.identity);
            laserPosIndex++;
        }
    }
   
}

LaserSpawner2.cs

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UIElements;

public class LaserSpawner2 : MonoBehaviour
{
    [SerializeField] private GameObject laser;
    private float laserPos = 1;
    private float spawnRate = 2.5f;
    private float timer;

    [SerializeField] private Transform laserPos1;
    [SerializeField] private Transform laserPos2;
    [SerializeField] private Transform laserPos3;
    [SerializeField] private Transform laserPos4;

    
    // Update is called once per frame
    void Update()
    {
        if(timer < spawnRate)
        {
            timer += Time.deltaTime;
        }
        else
        {
            timer = 0;
            CheckLaserPos();
        }
    }

    void CheckLaserPos()
    {
        if (laserPos == 1)
        {
            Instantiate(laser, new Vector3(transform.position.x, laserPos1.position.y, 0), Quaternion.identity);
            laserPos += 1;
        }
        else if (laserPos == 2)
        {
            Instantiate(laser, new Vector3(transform.position.x, laserPos2.position.y, 0), Quaternion.identity);
            laserPos += 1;
        }
        else if (laserPos == 3)
        {
            Instantiate(laser, new Vector3(transform.position.x, laserPos3.position.y, 0), Quaternion.identity);
            laserPos += 1;
        }
        else
        {
            Instantiate(laser, new Vector3(transform.position.x, laserPos4.position.y, 0), Quaternion.identity);
            laserPos = 1;
        }
    }
}


LaserScript.cs

using System.Collections;
using System.Collections.Generic;
using System.Threading;
using UnityEngine;

public class LaserScript : MonoBehaviour
{
    private float countdown = 1;
        
    
    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        if(countdown <= 0)
        {
            Destroy(gameObject);
        }
        else
        {
            countdown -= Time.deltaTime;
        }

    }
}


MainMenuScript.cs

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;
public class MainMenuScript : MonoBehaviour
{
    public void PressPlay()
    {
        SceneManager.LoadScene(1);
    }
    
    public void PressQuit()
    {
        Application.Quit();
        Debug.Log("Quit game");
    }
}


BallSpawner.cs

using System.Collections;
using System.Collections.Generic;
using UnityEditor.Build;
using UnityEngine;

public class BallScript : MonoBehaviour
{
    

    [SerializeField] private GameObject ball;

    private float currentSpawn = 1;
    public Transform spawn1;
    public Transform spawn2;
    public Transform spawn3;
    public Transform spawn4;
    public Transform spawn5;
    public Transform spawn6;
    public Transform spawn7;
    public Transform spawn8;
    public Transform spawn9;
    public Transform spawn10;

    private float timer;
    [SerializeField] private float spawnRate;

    // Start is called before the first frame update
    void Start()
    {
        checkBallSpawn();
    }

    // Update is called once per frame
    void Update()
    {
        
        if(timer >= spawnRate)
        {
            checkBallSpawn();
            timer = 0;
        }
        else if(timer < spawnRate)
        {
            timer += Time.deltaTime;
        }
    }

    private void checkBallSpawn()
    {
        if(currentSpawn == 1)
        {
            Instantiate(ball, new Vector3(spawn1.position.x, spawn1.position.y, 0f), Quaternion.identity);
            currentSpawn += 1;
        }
        else if(currentSpawn == 2)
        {
            Instantiate(ball, new Vector3(spawn2.position.x, spawn2.position.y, 0f), Quaternion.identity);
            currentSpawn += 1;
        }
        else if (currentSpawn == 3)
        {
            Instantiate(ball, new Vector3(spawn3.position.x, spawn3.position.y, 0f), Quaternion.identity);
            currentSpawn += 1;
        }
        else if (currentSpawn == 4)
        {
            Instantiate(ball, new Vector3(spawn4.position.x, spawn4.position.y, 0f), Quaternion.identity);
            currentSpawn += 1;
        }
        else if (currentSpawn == 5)
        {
            Instantiate(ball, new Vector3(spawn5.position.x, spawn5.position.y, 0f), Quaternion.identity);
            currentSpawn += 1;
        }
        else if (currentSpawn == 6)
        {
            Instantiate(ball, new Vector3(spawn6.position.x, spawn6.position.y, 0f), Quaternion.identity);
            currentSpawn += 1;
        }
        else if (currentSpawn == 7)
        {
            Instantiate(ball, new Vector3(spawn7.position.x, spawn7.position.y, 0f), Quaternion.identity);
            currentSpawn += 1;
        }
        else if (currentSpawn == 8)
        {
            Instantiate(ball, new Vector3(spawn8.position.x, spawn8.position.y, 0f), Quaternion.identity);
            currentSpawn += 1;
        }
        else if (currentSpawn == 9)
        {
            Instantiate(ball, new Vector3(spawn9.position.x, spawn9.position.y, 0f), Quaternion.identity);
            currentSpawn += 1;
        }
        else if (currentSpawn == 10)
        {
            Instantiate(ball, new Vector3(spawn10.position.x, spawn10.position.y, 0f), Quaternion.identity);
            currentSpawn = 1;
        }
    }
}


