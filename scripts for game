movement.cs

using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.UIElements;
using static UnityEditor.Experimental.GraphView.GraphView;

public class movement : MonoBehaviour
{
    private float Move;
    [SerializeField] private float Jump;
    [SerializeField] private float Speed;
    [SerializeField] private float DashSpeed;
    private bool isGrounded;
    private bool isDashing;
    private float dashDuration = 0.265f;
    private bool canDash;
    private bool inDashCD;
    private float dashCD = 1.5f;
    private bool invinc = false;

    private bool facingLeft;

    [SerializeField] public Sprite spriteColor;
    [SerializeField] private Sprite spriteColor1;
    [SerializeField] private Sprite spriteColor2;
    [SerializeField] private Sprite spriteColor3;

    public Transform player;
    public Transform respawnPoint;
    public Transform deadPoint;
    


    private Rigidbody2D rb;
    private SpriteRenderer sr;
    private TrailRenderer tr;

    // Start is called before the first frame update
    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        isGrounded = false;
        sr = GetComponent<SpriteRenderer>();
        tr = GetComponent<TrailRenderer>();

        canDash = true;
    }

    // Update is called once per frame
    void Update()
    {
        if(isDashing == true)
        {
            return;
        }

        Move = Input.GetAxis("Horizontal");

        

        if (Input.GetKeyDown(KeyCode.Q) && canDash == true)
        {
            StartCoroutine(Dash());
        }
        

        if (Input.GetKeyDown(KeyCode.Space) && isGrounded == true)
        {
            rb.velocity = new Vector2(rb.velocity.x, Jump);
            isGrounded = false;
        }

        if (isDashing == true || invinc == true)
        {
            spriteColor = spriteColor2;
        }
        else if(inDashCD == true)
        { 
            spriteColor = spriteColor3;
        }
        else
        {
            spriteColor = spriteColor1;
        }

        sr.sprite = spriteColor;

        Invert();
    }
    private void FixedUpdate()
    {
        if(isDashing == true)
        {
            return;
        }
        rb.velocity = new Vector2(Move * Speed, rb.velocity.y);
    }

    void OnCollisionStay2D()
    {
        isGrounded = true;
    }
    private void OnCollisionExit2D()
    {
        isGrounded = false;
    }

    

    private void OnTriggerEnter2D()
    {
        if(invinc == false)
        {
            player.position = deadPoint.position;
            Invoke("RespawnPlayer", 1.5f);
        }
    }

    public void RespawnPlayer()
    {

        player.position = respawnPoint.position;
        invinc = true;
        Invoke("noInvinc", 0.15f);
    }
    private IEnumerator Dash()
    {
        isDashing = true;
        invinc = true;
        inDashCD = true;
        canDash = false;

        float originalGravity = rb.gravityScale;
        rb.gravityScale = 0f;
        rb.velocity = new Vector2(transform.localScale.x * DashSpeed, 0f);
        yield return new WaitForSeconds(0.05f);
        tr.emitting = true;
        yield return new WaitForSeconds(dashDuration);
        tr.emitting = false;
        rb.gravityScale = originalGravity;
        isDashing = false;
        Invoke("noInvinc", 0.1f);
        yield return new WaitForSeconds(dashCD);
        canDash = true;
        inDashCD = false;
    }
    void noInvinc()
    {
        invinc = false;
    }

    private void Invert()
    {
        if (facingLeft && Move > 0f || !facingLeft && Move < 0f)
        {
            Vector3 localScale = transform.localScale;
            facingLeft = !facingLeft;
            localScale.x *= -1f;
            transform.localScale = localScale;
        }
    }

}



LaserScript.cs

using System.Collections;
using System.Collections.Generic;
using System.Threading;
using UnityEngine;

public class LaserScript : MonoBehaviour
{
    [SerializeField] private float countdown;
        
    
    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        if(countdown <= 0)
        {
            gameObject.SetActive(false);
        }
        else
        {
            countdown -= Time.deltaTime;
        }

    }
}




LaserSpawner.cs

using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Unity.Mathematics;
using UnityEngine;

public class LaserSpawner : MonoBehaviour
{
    public GameObject laser;
    public GameObject preLaser;

    [SerializeField] private float spawnRate;
    private float timer = 0;

    public Transform One;
    public Transform Two;
    public Transform Three;
    public Transform Four;
    public Transform Five;
    public Transform Six;
    public Transform Seven;
    public Transform Eight;
    public Transform Nine;

    private float laserPos = 1;

    [SerializeField] private float leftRight;
    private float furthestLeft;
    private float furthestRight;

    // Start is called before the first frame update
    void Start()
    {
        leftRight = 5;

        furthestRight += leftRight;
        furthestLeft -= leftRight;
    }

    // Update is called once per frame
    void Update()
    {
        if (timer <= spawnRate)
        {
            timer = timer + Time.deltaTime;
        }
        else
        {
            timer = 0;
            if(laserPos == 1)
            {
                Instantiate(laser, new Vector3(One.position.x, transform.position.y, 0), Quaternion.identity);
                laserPos += 1;
            }
            else if (laserPos == 2)
            {
                Instantiate(laser, new Vector3(Two.position.x, transform.position.y, 0), Quaternion.identity);
                laserPos += 1;
            }
            else if(laserPos == 3)
            {
                Instantiate(laser, new Vector3(Three.position.x, transform.position.y, 0), Quaternion.identity);
                laserPos += 1;
            }
            else if (laserPos == 4)
            {
                Instantiate(laser, new Vector3(Four.position.x, transform.position.y, 0), Quaternion.identity);
                laserPos += 1;
            }
            else if (laserPos == 5)
            {
                Instantiate(laser, new Vector3(Five.position.x, transform.position.y, 0), Quaternion.identity);
                laserPos += 1;
            }
            else if (laserPos == 6)
            {
                Instantiate(laser, new Vector3(Six.position.x, transform.position.y, 0), Quaternion.identity);
                laserPos += 1;
            }
            else if (laserPos == 7)
            {
                Instantiate(laser, new Vector3(Seven.position.x, transform.position.y, 0), Quaternion.identity);
                laserPos += 1;
            }
            else if (laserPos == 8)
            {
                Instantiate(laser, new Vector3(Eight.position.x, transform.position.y, 0), Quaternion.identity);
                laserPos += 1;
            }
            else if (laserPos == 9)
            {
                Instantiate(laser, new Vector3(Nine.position.x, transform.position.y, 0), Quaternion.identity);
                laserPos = 1;
            }
        }

    }
}
